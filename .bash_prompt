#!/usr/bin/env bash

function parse_git_dirty {
    if [[ $(git status --porcelain 2> /dev/null) == "" ]]; then
        echo -e '\033[0;32m✔'
    else
        echo -e '\033[0;31m✗✗✗'
    fi
}

function parse_svn_dirty {
if [[ ($(svn st 2> /dev/null) == "") || ($(svn st 2> /dev/null | wc -l) == 1 && $(svn st 2> /dev/null | sed -e 's/\s*\(.\)\s*.*/\1/') == 'S') ]]; then
        echo -e '\033[0;32m✔'
    else
        echo -e '\033[0;31m✗✗✗'
    fi
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \\(.*\\)/$(echo -e '\033[00m') on $(echo -e '\033[1;37m')\\1$(echo -e '\033[00m')[git]$(parse_git_dirty)/"
}

function parse_svn_branch {
    svn info 2> /dev/null | grep -i url | sed -e "s#url: $REPO\\/\\(.*\\)#$(echo -e '\033[00m') on $(echo -e '\033[1;37m')\\1$(echo -e '\033[00m')[svn]$(parse_svn_dirty)#i"
}

function parse_aws_user {
    [[ -n ${AWSUSER:-''} ]] && echo -e "$AWSUSER "
}

function prompt {
    # An extravagent PS1 http://blog.bigdinosaur.org/easy-ps1-colors/
    # 30m - Black
    # 31m - Red
    # 32m - Green
    # 33m - Yellow
    # 34m - Blue
    # 35m - Purple
    # 36m - Cyan
    # 37m - White
    # 0 - Normal
    # 1 - Bold
    local BLACK='\[\033[0;30m\]'
    local BLACKBOLD='\[\033[1;30m\]'
    local RED='\[\033[0;31m\]'
    local REDBOLD='\[\033[1;31m\]'
    local GREEN='\[\033[0;32m\]'
    local GREENBOLD='\[\033[1;32m\]'
    local YELLOW='\[\033[0;33m\]'
    local YELLOWBOLD='\[\033[1;33m\]'
    local BLUE='\[\033[0;34m\]'
    local BLUEBOLD='\[\033[1;34m\]'
    local PURPLE='\[\033[0;35m\]'
    local PURPLEBOLD='\[\033[1;35m\]'
    local CYAN='\[\033[0;36m\]'
    local CYANBOLD='\[\033[1;36m\]'
    local WHITE='\[\033[0;37m\]'
    local WHITEBOLD='\[\033[1;37m\]'
    local NORMAL='\[\033[00m\]'
    # Minimal prompt
#    PS1="$WHITEBOLD# $PURPLE\u$NORMAL at $BLUE\h$NORMAL in $GREEN\w$NORMAL\$(parse_git_branch)\$(parse_svn_branch)\n  $NORMAL"
    PS1="$WHITEBOLD# ${RED}\$(parse_aws_user)$PURPLE\\u$NORMAL at $BLUE\\h$NORMAL in $GREEN\\w$NORMAL\$(parse_git_branch)\\n  $NORMAL"
    # Verbose prompt
    # PS1="$WHITEBOLD# $GREEN\u$WHITEBOLD. $BLUE\h$WHITEBOLD. $YELLOW\d$WHITE at $PURPLE\@$WHITEBOLD. $CYAN\w$NORMAL\$(parse_svn_branch)\n  $NORMAL"
}
#prompt
#PROMPT_COMMAND='history -a ; echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'

# Set config variables first
GIT_PROMPT_ONLY_IN_REPO=1

# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
# GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules

# GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
# GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all; determines counting of untracked files

# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files

# GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10

# GIT_PROMPT_START=...    # uncomment for custom prompt start sequence
# GIT_PROMPT_END=...      # uncomment for custom prompt end sequence

# as last entry source the gitprompt script
# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme
PROMPT_COMMAND='history -a'
if [[ -f $(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh ]]; then
  __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
  source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
fi
